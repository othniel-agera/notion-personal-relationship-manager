{"version":3,"file":"multer.js","sourceRoot":"","sources":["../../src/middlewares/multer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAoC;AACpC,uEAA8D;AAC9D,kDAA+C;AAC/C,0CAAoB;AAEpB,IAAM,YAAY,GAAG,oBAAU,CAAC,EAAE,CAAC;AACnC,YAAY,CAAC,MAAM,CAAC;IACnB,UAAU,EAAE,OAAO;IACnB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB;IACvC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB;CAC7C,CAAC,CAAC;AAEH,IAAI,OAAO,GAAG,IAAI,CAAC;AACnB,IAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAC;IACxC,OAAO,GAAG,IAAI,6CAAiB,CAAC;QAC/B,UAAU,EAAE,YAAY;QACxB,MAAM,EAAE,UAAO,GAAG,EAAE,IAAI;;gBACvB,sBAAO;wBACN,MAAM,EAAE,sBAAsB;wBAC9B,aAAa,EAAE,MAAM;wBACrB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY;qBAC1E,EAAC;;aACF;KACD,CAAC,CAAC;CACH;KAAK;IACL,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC;QAC5B,WAAW,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC1B,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAC;gBAC/B,YAAE,CAAC,KAAK,CAAC,YAAY,EAAE,UAAC,GAAG;oBAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC;aACH;iBAAK;gBACL,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;aACvB;QACF,CAAC;QACD,QAAQ,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACvB,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3E,CAAC;KACD,CAAC,CAAC;CACH;AAED,IAAM,UAAU,GAAG,UAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IAChC,IAAG,IAAI,CAAC,QAAQ,KAAK,YAAY,IAAK,IAAI,CAAC,QAAQ,KAAK,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,eAAe,EAAC;QACxG,uBAAuB;QACvB,iBAAiB;KACjB;SAAI;QACJ,uBAAuB;QACvB,kBAAkB;KAClB;IACD,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChB,CAAC,CAAA;AACY,QAAA,MAAM,GAAG,IAAA,gBAAM,EAAC;IAC5B,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE;QACP,QAAQ,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,KAAK;KAC/B;IACD,UAAU,EAAE,UAAU;CACtB,CAAC,CAAC","sourcesContent":["import cloudinary from 'cloudinary';\nimport { CloudinaryStorage } from 'multer-storage-cloudinary';\nimport multer, { StorageEngine } from 'multer';\nimport fs from 'fs';\n\nconst cloudinaryV2 = cloudinary.v2;\ncloudinaryV2.config({\n\tcloud_name: 'lenxo',\n\tapi_key: process.env.CLOUDINARY_API_KEY,\n\tapi_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nlet storage = null;\nif(process.env.NODE_ENV === 'production'){\n\tstorage = new CloudinaryStorage({\n\t\tcloudinary: cloudinaryV2,\n\t\tparams: async (req, file)=>{\n\t\t\treturn {\n\t\t\t\tfolder: 'dynamic-tech/uploads',\n\t\t\t\tresource_type: 'auto',\n\t\t\t\tpublic_id: new Date().toISOString().replace(/:/g, '-') + file.originalname\n\t\t\t};\n\t\t}\n\t});\n}else {\n\tstorage = multer.diskStorage({\n\t\tdestination: (req, file, cb)=>{\n\t\t\tif(!fs.existsSync('./uploads/')){\n\t\t\t\tfs.mkdir('./uploads/', (err)=>{\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tcb(null, './uploads/');\n\t\t\t\t});\n\t\t\t}else {\n\t\t\t\tcb(null, './uploads/');\t\t\t\t\n\t\t\t}\n\t\t},\n\t\tfilename: (req, file, cb)=>{\n\t\t\tcb(null, new Date().toISOString().replace(/:/g, '-') + file.originalname);\n\t\t}\n\t});\n}\n\nconst filefilter = (req, file, cb)=>{\n\tif(file.mimetype === 'image/jpeg'  || file.mimetype === 'image/png' || file.mimetype === 'image/svg+xml'){\n\t\t//console.log('image');\n\t\t//cb(null, true);\n\t}else{\n\t\t//console.log('other');\n\t\t//cb(null, false);\n\t}\n\tcb(null, true);\n}\nexport const upload = multer({\n\tstorage: storage,\n\tlimits: {\n\t\tfileSize: 1024 * 1024 * 5 //5MB\n\t},\n\tfileFilter: filefilter\n});\n"]}