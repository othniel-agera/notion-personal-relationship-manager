{"version":3,"file":"AuthController.js","sourceRoot":"","sources":["../../src/controllers/AuthController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport mongoose from \"mongoose\";\n\nimport { get, post, bodyValidator, controller } from \"./decorators/index\";\nimport { User, RequestWithBody } from \"../interfaces\";\n\nconst UserModel = mongoose.model<User>(\"User\");\n\n@controller(\"/auth\")\nclass AuthController {\n  @post(\"/login\")\n  @bodyValidator(\"username\", \"password\")\n  async userLogin(req: RequestWithBody, res: Response) {\n    const { username, password } = req.body;\n    const dataF = {\n      message: \"Auth failed!\",\n    };\n    try {\n      const users: User[] = await UserModel.find({\n        username: username.toLowerCase(),\n      });\n      if (users.length < 1) {\n        return res.statusJson(401, { data: dataF });\n      }\n      bcrypt.compare(password, users[0].password, (err, result) => {\n        if (err) {\n          return res.statusJson(401, { data: dataF });\n        }\n        if (result) {\n          const token = jwt.sign(\n            {\n              username: users[0].username,\n              userId: users[0]._id,\n            },\n            process.env.JWT_KEY,\n            {\n              expiresIn: \"48h\",\n            }\n          );\n          const data = {\n            message: \"Auth Successful\",\n            token: token,\n            username: users[0].username,\n          };\n          return res.statusJson(200, { data: data });\n        }\n        return res.statusJson(402, { data: dataF });\n      });\n    } catch (error) {\n      const data = {\n        error,\n        success: false,\n      };\n      return res.statusJson(500, { data: data });\n    }\n  }\n\n  @post(\"/signup\")\n  @bodyValidator(\n    \"username\",\n    \"password\",\n    \"email\",\n    \"address\",\n    \"firstname\",\n    \"lastname\"\n  )\n  async userSignup(req: RequestWithBody, res: Response) {\n    const { username, password, email, address, firstname, lastname } =\n      req.body;\n    try {\n      const users: User[] = await UserModel.find({\n        username: username.toLowerCase(),\n      });\n\n      if (users.length >= 1) {\n        const data = {\n          message: \"Sorry this username has already been taken\",\n        };\n        return res.statusJson(409, { data: data });\n      } else {\n        bcrypt.hash(password, 10, async (err, hash) => {\n          if (err) {\n            return res.statusJson(500, {\n              data: {\n                err: err,\n              },\n            });\n          } else {\n            const user = new UserModel({\n              username: username.toLowerCase(),\n              password: hash,\n              email,\n              address,\n              firstname,\n              lastname,\n            });\n            const newUser = await user.save();\n            const data = {\n              message: \"User created\",\n              success: true,\n              user: newUser,\n            };\n            return res.statusJson(200, { data: data });\n          }\n        });\n      }\n    } catch (error) {\n      console.log(\"===============\");\n      console.log(error);\n      console.log(\"===============\");\n      const data = {\n        error,\n        success: false,\n      };\n      return res.statusJson(500, { data: data });\n    }\n  }\n\n  @get(\"/exist/:username\")\n  async checkUserExistence(req: Request, res: Response) {\n    const { username } = req.params;\n    let data = { status: false };\n    try {\n      const user: User = await UserModel.findOne({\n        username: username,\n      });\n      if (!user) {\n        return res.statusJson(404, { data: data });\n      }\n      data.status = true;\n      return res.statusJson(200, { data: data });\n    } catch (error) {\n      console.log(error);\n      data[\"error\"] = error;\n      return res.statusJson(500, { data: data });\n    }\n  }\n  @get(\"/users\")\n  async getAllUsers(req: Request, res: Response) {\n    let data: { status: boolean; users: User[] } = {\n      status: false,\n      users: [],\n    };\n    try {\n      const users = await UserModel.find({});\n      if (users.length === 0) {\n        return res.statusJson(404, { data: data });\n      }\n      data.status = true;\n      data.users = users;\n      return res.statusJson(200, { data: data });\n    } catch (error) {\n      console.log(error);\n      data[\"error\"] = error;\n      return res.statusJson(500, { data: data });\n    }\n  }\n  @get(\"/users/:id\")\n  async getUser(req: Request, res: Response) {\n    const { id } = req.params;\n    let data: { status: boolean; message?: String; user?: User } = {\n      status: false,\n    };\n    try {\n      if (!mongoose.Types.ObjectId.isValid(id)) {\n        data.message = \"Invalid object id\";\n        return res.statusJson(400, { data: data });\n      }\n      const user = await UserModel.findOne({ id });\n      if (!user) {\n        data.message = \"User not found\";\n        return res.statusJson(404, { data: data });\n      }\n      data.status = true;\n      data.user = user;\n      return res.statusJson(200, { data: data });\n    } catch (error) {\n      console.log(error);\n      data[\"error\"] = error;\n      return res.statusJson(500, { data: data });\n    }\n  }\n}\n"]}