{"version":3,"file":"ProductController.js","sourceRoot":"","sources":["../../../src/controllers/API/ProductController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { get, controller } from \"../decorators/index\";\nimport { Product } from \"../../interfaces\";\nimport { base, view } from \"../../app\";\nimport { Records } from \"airtable\";\n\nconst ProductModel = base<Product>(\"product\");\n\n@controller(\"/api\")\nclass ProductController {\n  @get(\"/products\")\n  async getProducts(req: Request, res: Response) {\n    const { quantity } = req.query;\n    try {\n      const productSelect = ProductModel.select({ view });\n      let records: Records<Product>;\n      if (quantity) {\n        records = await productSelect.firstPage();\n      } else {\n        records = await productSelect.all();\n      }\n      // console.log(records);\n      const products: Product[] = [];\n      records.map((record) => {\n        //console.log(record);\n        products.push({ ...record.fields, id: record.getId() });\n      });\n      if (products.length < 1) {\n        return res.statusJson(404, { data: { message: \"No Product\" } });\n      }\n\n      return res.statusJson(200, { data: products });\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @get(\"/products/search\")\n  async searchProducts(req: Request, res: Response) {\n    const { query } = req;\n    const { pathnumber, description, func } = query;\n    try {\n      let filterByFormula = \"\";\n      const funcs = [\"and\", \"or\"];\n      const fieldToFilter = {\n        pathnumber: \"PartNumber\",\n        description: \"Description\",\n      };\n      //make this check sort of dynamic\n      for (const key in fieldToFilter) {\n        const element = fieldToFilter[key];\n        if (query[key]) {\n          filterByFormula += filterByFormula ? \" , \" : \"\";\n          filterByFormula += `{${element}} = \"${query[key]}\"`;\n        }\n      }\n      /* if (pathnumber) {\n        filterByFormula += `{PartNumber} = \"${pathnumber}\"`;\n      }\n      if (description) {\n        filterByFormula += filterByFormula ? \" , \" : \"\";\n        filterByFormula += `{Description} = \"${description}\"`;\n      }*/\n      if (filterByFormula) {\n        const finalFilter =\n          func && funcs.includes(func as string)\n            ? `${(func as string).toUpperCase()}(${filterByFormula})`\n            : filterByFormula;\n        console.log(finalFilter);\n        const records: Records<Product> = await ProductModel.select({\n          filterByFormula: finalFilter,\n        }).all();\n        // console.log(records);\n        const products: Product[] = [];\n        records.map((record) => {\n          //console.log(record);\n          products.push({ ...record.fields, id: record.getId() });\n        });\n        if (products.length < 1) {\n          return res.statusJson(404, { data: { message: \"No Product\" } });\n        }\n\n        return res.statusJson(200, { data: products });\n      } else {\n        return res.statusJson(404, { data: { message: \"No Product\" } });\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @get(\"/product/:id\")\n  async getProduct(req: Request, res: Response) {\n    const { id } = req.params;\n    try {\n      const productRecord = await ProductModel.find(id);\n      if (!productRecord) {\n        return res.statusJson(404, { data: { message: \"No Product\" } });\n      }\n      const product: Product = {\n        ...productRecord.fields,\n        id: productRecord.getId(),\n      };\n\n      return res.statusJson(200, { data: product });\n    } catch (error) {\n      return res.statusJson(error.statusCode || 500, { error });\n    }\n  }\n\n  /* If theres a need for delete and add then i can get the code from the dynamics */\n}\n"]}