{"version":3,"file":"CartController.js","sourceRoot":"","sources":["../../../src/controllers/API/CartController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport { get, post, bodyValidator, controller, del } from \"../decorators/index\";\nimport { Product, Order, User, Cart, CartItem } from \"../../interfaces\";\nimport { base } from \"../../app\";\n\nconst UserModel = mongoose.model<User>(\"User\");\nconst CartModel = mongoose.model<Cart>(\"Cart\");\nconst ProductModel = base<Product>(\"product\");\n\n@controller(\"/api\")\nclass CartController {\n  //write test asap for this and other cart operations\n  //add\n  //   new cart item\n  // edit\n  //  cart items is taken care of in add\n  //  cart item\n  // delete\n  //  multiple items\n  //  entire items\n  //  one item\n  @post(\"/cart\")\n  @bodyValidator(\"userId\", \"products\")\n  async addToCart(req: Request, res: Response) {\n    const { userId, products } = req.body;\n    try {\n      const productMap = new Map<string, number>();\n      for (let product of products as CartItem[]) {\n        const productRecord = await ProductModel.find(product.productId);\n        productRecord && productMap.set(product.productId, product.quantity);\n      }\n      const user = await UserModel.findById(userId);\n      if (user) {\n        let cart = await CartModel.findOne({\n          userId,\n        });\n        if (cart) {\n          for (let item of cart.cartItems) {\n            const { productId } = item;\n            const productQ = productMap.get(productId);\n            if (productQ) {\n              item.quantity = productQ;\n              productMap.delete(productId);\n            }\n          }\n          for (const [productId, quantity] of productMap) {\n            cart.cartItems.push({\n              quantity,\n              productId,\n            });\n          }\n          await cart.save({});\n          return res.statusJson(200, {\n            data: {\n              message: \"Products successfully edited to cart\",\n              cart,\n            },\n          });\n        } else {\n          const newCart = new CartModel({\n            userId,\n            cartItems: products as CartItem[],\n          });\n          await newCart.save({});\n          return res.statusJson(201, {\n            data: {\n              message: \"Products successfully added to cart\",\n              cart: newCart,\n            },\n          });\n        }\n      } else {\n        return res.statusJson(404, {\n          data: {\n            message: \"User does not exist\",\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @get(\"/carts\")\n  async getCarts(req: Request, res: Response) {\n    try {\n      const carts = await CartModel.find({});\n\n      return res.statusJson(200, {\n        data: {\n          message: \"Retrieved carts successfully\",\n          carts,\n        },\n      });\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @get(\"/cart/:id\")\n  async getCart(req: Request, res: Response) {\n    const { id } = req.params;\n    try {\n      if (mongoose.Types.ObjectId.isValid(id)) {\n        const cart = await CartModel.findById(id);\n        if (cart) {\n          return res.statusJson(200, {\n            data: {\n              message: \"Cart retrieved successfully\",\n              cart,\n            },\n          });\n        } else {\n          return res.statusJson(404, {\n            data: {\n              message: \"Cart not found\",\n            },\n          });\n        }\n      } else {\n        return res.statusJson(404, {\n          data: {\n            message: \"Invalid cart Id\",\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @del(\"/cart/:id\")\n  async deleteCart(req: Request, res: Response) {\n    const { id } = req.params;\n    try {\n      if (mongoose.Types.ObjectId.isValid(id)) {\n        const cart = await CartModel.deleteOne({ id });\n        if (cart.deletedCount) {\n          return res.statusJson(200, {\n            data: {\n              message: \"Cart deleted successfully\",\n              cart,\n            },\n          });\n        } else {\n          return res.statusJson(404, {\n            data: {\n              message: \"Cart by that id not found\",\n              cart,\n            },\n          });\n        }\n      } else {\n        return res.statusJson(404, {\n          data: {\n            message: \"Invalid cart Id\",\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n\n  @del(\"/cart/:id/:productId\")\n  async deleteCartItem(req: Request, res: Response) {\n    const { id, productId } = req.params;\n    try {\n      if (mongoose.Types.ObjectId.isValid(id)) {\n        const cart = await CartModel.findById(id);\n        if (cart) {\n          cart.cartItems = cart.cartItems.filter(\n            (item) => item.productId !== productId\n          );\n          await cart.save({});\n          return res.statusJson(200, {\n            data: {\n              message: \"Cart item deleted successfully\",\n              cart,\n            },\n          });\n        } else {\n          return res.statusJson(404, {\n            data: {\n              message: \"Cart by that id not found\",\n            },\n          });\n        }\n      } else {\n        return res.statusJson(404, {\n          data: {\n            message: \"Invalid cart Id\",\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n}\n"]}