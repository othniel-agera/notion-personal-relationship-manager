{"version":3,"file":"OrderController.js","sourceRoot":"","sources":["../../../src/controllers/API/OrderController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport axios, { Method } from \"axios\";\nimport { get, post, bodyValidator, controller } from \"../decorators/index\";\nimport {\n  Product,\n  Order,\n  OrderProduct,\n  OrderProductQuery,\n} from \"../../interfaces\";\nimport { base } from \"../../app\";\n\nconst PAYSTACK = \"https://api.paystack.co/transaction\";\nconst Header = {\n  Authorization: `Bearer ${process.env.PAYSTACK_SECRET_KEY}`,\n  \"Content-Type\": \"application/json\",\n};\nconst ProductModel = base<Product>(\"product\");\nconst OrderModel = mongoose.model<Order>(\"Order\");\n\n@controller(\"/api/order\")\nclass OrderController {\n  @post(\"/checkout\")\n  @bodyValidator(\"email\", \"products\", \"callback_url\")\n  async checkout(req: Request, res: Response) {\n    const { email, products, callback_url } = req.body;\n    try {\n      const productsFound: Product[] = [];\n      let totalAmount = 0;\n      const newProducts: OrderProduct[] = [];\n      for (const product of products as OrderProductQuery[]) {\n        const productRecord = await ProductModel.select({\n          filterByFormula: `PartNumber = \"${product.PartNumber}\"`,\n        }).all();\n        if (productRecord.length > 0) {\n          productsFound.push(productRecord[0].fields);\n          totalAmount += productRecord[0].fields.MSRP * product.quantity;\n          newProducts.push({\n            ...product,\n            productId: productRecord[0].getId(),\n          });\n        }\n      }\n      const paymentdata = JSON.stringify({\n        email: email,\n        amount: `${totalAmount}00`,\n        callback_url: callback_url || \"https://www.google.com\",\n      });\n      const POST: Method = \"POST\";\n      const config = {\n        method: POST,\n        url: `${PAYSTACK}/initialize`,\n        headers: Header,\n        data: paymentdata,\n      };\n      const response = await axios(config);\n      const order = new OrderModel({\n        products: newProducts,\n        amount: totalAmount,\n        paymentRef: response.data.data.reference,\n      });\n      const newOrder = await order.save({});\n      return res.statusJson(200, {\n        data: {\n          message: \"Order checked out\",\n          order: newOrder,\n          authorization_url: response.data.data.authorization_url,\n        },\n      });\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n  @get(\"/verify/:reference\")\n  async verify(req: Request, res: Response) {\n    const { reference } = req.params;\n    try {\n      const order = await OrderModel.findOne({ paymentRef: reference });\n      if (order) {\n        const dataVerify = JSON.stringify({ reference: reference });\n        const GET: Method = \"GET\";\n        const configVerify = {\n          method: GET,\n          url: `${PAYSTACK}/verify/${reference}`,\n          headers: Header,\n          data: dataVerify,\n        };\n\n        const responseVerify = await axios(configVerify);\n        const { data, status } = responseVerify.data;\n        if (status && data.status === \"success\") {\n          order.status = true;\n          await order.save();\n          const productsArrays: OrderProduct[][] = [];\n          for (let ii = 0; ii < order.products.length; ii = +9) {\n            let t = [];\n            productsArrays.push(order.products.slice(ii, ii + 10));\n          }\n          for (let ii = 0; ii < productsArrays.length; ii++) {\n            const products = [];\n            for (const product of productsArrays[ii]) {\n              const prod = await ProductModel.find(`${product.productId}`);\n              products.push({\n                id: prod.getId(),\n                fields: {\n                  Quantity: prod.get(\"Quantity\") - product.quantity,\n                },\n              });\n            }\n            await ProductModel.update(products);\n          }\n          return res.statusJson(200, {\n            data: {\n              message: \"Order verification successful\",\n              order,\n            },\n          });\n        } else {\n          return res.statusJson(200, {\n            data: {\n              message: \"Order verification unsuccessful\",\n            },\n          });\n        }\n      }\n      return res.statusJson(200, {\n        data: {\n          message: \"Order not found\",\n        },\n      });\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n}\n"]}