{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../src/controllers/decorators/controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAA0B;AAE1B,6CAA4C;AAE5C,+CAA8C;AAC9C,mEAAkE;AAElE;;;;;;;;;;;;;;;;GAgBG;AAEH,SAAgB,UAAU,CAAC,WAAmB;IAC7C,OAAO,UAAS,MAAgB;QAC/B,IAAM,MAAM,GAAG,qBAAS,CAAC,WAAW,EAAE,CAAC;QACvC,KAAI,IAAI,GAAG,IAAI,MAAM,CAAC,SAAS,EAAC;YAC/B,IAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAC/B,2BAAY,CAAC,IAAI,EACjB,MAAM,CAAC,SAAS,EAChB,GAAG,CACH,CAAC;YACF,IAAM,MAAM,GAAY,OAAO,CAAC,WAAW,CAC1C,2BAAY,CAAC,MAAM,EACnB,MAAM,CAAC,SAAS,EAChB,GAAG,CACH,CAAC;YACF,IAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CACtC,2BAAY,CAAC,UAAU,EACvB,MAAM,CAAC,SAAS,EAChB,GAAG,CACH,IAAI,EAAE,CAAC;YACR,IAAM,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAC5C,2BAAY,CAAC,SAAS,EACtB,MAAM,CAAC,SAAS,EAChB,GAAG,CACH,IAAI,EAAE,CAAC;YAER,IAAM,SAAS,GAAG,IAAA,+BAAc,EAAC,iBAAiB,CAAC,CAAC;YAEpD,IAAG,IAAI,EAAC;gBACP,MAAM,CAAC,MAAM,CAAC,OAAd,MAAM,+BACL,UAAG,WAAW,SAAG,IAAI,CAAE,UACpB,WAAW,YACd,SAAS;oBACT,YAAY,WACX;aACF;SACD;IACF,CAAC,CAAA;AACF,CAAC;AAtCD,gCAsCC","sourcesContent":["import 'reflect-metadata';\nimport { Request, Response, NextFunction, RequestHandler} from 'express';\nimport { AppRouter } from '../../AppRouter';\nimport { Methods } from './Methods';\nimport { MetadataKeys } from './MetadataKeys';\nimport { bodyValidators } from '../../middlewares/bodyValidators';\nimport { use } from './use';\n/*\nfunction bodyValidators(keys: string): RequestHandler {\n\treturn function(req: Request, res: Response, next: NextFunction){\n\t\tif(!req.body){\n\t\t\tres.status(422).send('Invalid request');\n\t\t\treturn;\n\t\t}\n\n\t\tfor(let key of keys) {\n\t\t\tif(!req.body[key]) {\n\t\t\t\tres.status(422).send(`Missing property ${key}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tnext();\n\t};\n}*/\n\nexport function controller(routePrefix: string){\n\treturn function(target: Function){\n\t\tconst router = AppRouter.getInstance();\n\t\tfor(let key in target.prototype){\n\t\t\tconst routeHandler = target.prototype[key];\n\t\t\tconst path = Reflect.getMetadata(\n\t\t\t\tMetadataKeys.path,\n\t\t\t\ttarget.prototype,\n\t\t\t\tkey\n\t\t\t);\n\t\t\tconst method: Methods = Reflect.getMetadata(\n\t\t\t\tMetadataKeys.method,\n\t\t\t\ttarget.prototype,\n\t\t\t\tkey\n\t\t\t);\n\t\t\tconst middlewares = Reflect.getMetadata(\n\t\t\t\tMetadataKeys.middleware,\n\t\t\t\ttarget.prototype,\n\t\t\t\tkey\n\t\t\t) || [];\n\t\t\tconst requiredBodyProps = Reflect.getMetadata(\n\t\t\t\tMetadataKeys.validator,\n\t\t\t\ttarget.prototype,\n\t\t\t\tkey\n\t\t\t) || [];\n\n\t\t\tconst validator = bodyValidators(requiredBodyProps);\n\n\t\t\tif(path){\n\t\t\t\trouter[method](\n\t\t\t\t\t`${routePrefix}${path}`,\n\t\t\t\t\t...middlewares,\n\t\t\t\t\tvalidator,\n\t\t\t\t\trouteHandler\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}"]}